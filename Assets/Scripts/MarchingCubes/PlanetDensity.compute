#include "/Includes/Noise.compute"
#include "/Includes/Worley.compute"

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
static const int numThreads = 8;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float4> points;
uint numPointsPerAxis;
float radius; 
float MetersBetweenPoints;
float3 offset;
float3 center;

float3 location;

int octaves;
float lacunarity;
float persistence;
float hightNoiseScale;
float caveNoiseScale;
float caveNoiseCutoff;
float maxHeight;

float getNoise(float3 pos, float frequency, int o) {
    float noise = 0;

    float amplitude = 1;
    float weight = 1;
    for (int j = 0; j < o; j++) {
        float n = snoise((pos)*frequency);
        float v = 1 - abs(n);
        v = v * v;
        v *= weight;
        weight = max(min(v , 1), 0);
        noise += v * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }

    return noise;
}

float fBm_F0(float3 p, float freq, int octaves, float jitter)
{
    float amp = 1;
    float sum = 0;
    for (int i = 0; i < octaves; i++)
    {
        float2 F = inoise(p * freq, jitter) * amp;

        sum += 0.1 + sqrt(F[0]);

        freq *= lacunarity;
        amp *= persistence;
    }
    return sum;
}

float fBm_F1_F0(float3 p, float freq, int octaves, float jitter)
{
    float amp = 1;
    float sum = 0;
    for (int i = 0; i < octaves; i++)
    {
        float2 F = inoise(p * freq, jitter) * amp;

        sum += 0.1 + sqrt(F[1]) - sqrt(F[0]);

        freq *= lacunarity;
        amp *= persistence;
    }
    return sum;
}

int indexFromCoord(uint x, uint y, uint z) {
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

float invLerp(float from, float to, float value) {
    return (value - from) / (to - from);
}

float blend(float from, float to, float value, int strength) {
    if (value <= from)
        return 1;
    if (value >= to)
        return 0;

    float domain = (value - from) / (to - from);

    return 1 / (1 + pow(domain / (1 - domain), strength));
}


[numthreads(numThreads, numThreads, numThreads)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
        return;
    }

    float3 pos = id * MetersBetweenPoints+offset;
     

    ////////////////Noise////////////////////////
    
    float hightNoise = getNoise(pos+ location, hightNoiseScale / 100, octaves);


    float caveNoise = getNoise(pos + location+float3(1213, 12311414,87976), caveNoiseScale / 100, octaves);

    //float caveNoise = 2-fBm_F1_F0(pos + location + float3(1213, 12311414, 87976), caveNoiseScale / 100, octaves, 2);
     
    ////////////////End Noise////////////////////////
    float density = 0;
    density = radius - length(pos ) - (maxHeight * 1.3) + maxHeight * hightNoise;
     
    density = clamp(density, -10, 10);
    
    
    if (density < 0) {
        caveNoise = 1;
        caveNoiseCutoff = 0;
    }

    int index = indexFromCoord(id.x, id.y, id.z);
    points[index] = float4(pos-offset, density*(caveNoise - caveNoiseCutoff));

    //points[index] = float4(pos, caveNoise - caveNoiseCutoff);
}
